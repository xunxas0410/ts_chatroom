!function(){"use strict";var e,r,n,t,o,i,c,a={783:function(e,r,n){var t=n(618),o=Object.create(null),i="undefined"==typeof document,c=Array.prototype.forEach;function a(){}function d(e,r){if(!r){if(!e.href)return;r=e.href.split("?")[0]}if(l(r)&&!1!==e.isLoaded&&r&&r.indexOf(".css")>-1){e.visited=!0;var n=e.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.addEventListener("error",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.href="".concat(r,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(n,e.nextSibling):e.parentNode.appendChild(n)}}function u(){var e=document.querySelectorAll("link");c.call(e,(function(e){!0!==e.visited&&d(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,r){if(i)return console.log("no window.document found, will not HMR CSS"),a;var n,s,f=function(e){var r=o[e];if(!r){if(document.currentScript)r=document.currentScript.src;else{var n=document.getElementsByTagName("script"),i=n[n.length-1];i&&(r=i.src)}o[e]=r}return function(e){if(!r)return null;var n=r.split(/([^\\/]+)\.js$/),o=n&&n[1];return o&&e?e.split(",").map((function(e){var n=new RegExp("".concat(o,"\\.js$"),"g");return t(r.replace(n,"".concat(e.replace(/{fileName}/g,o),".css")))})):[r.replace(".js",".css")]}}(e);return n=function(){var e=f(r.filename),n=function(e){if(!e)return!1;var r=document.querySelectorAll("link"),n=!1;return c.call(r,(function(r){if(r.href){var o=function(e,r){var n;return e=t(e,{stripWWW:!1}),r.some((function(t){e.indexOf(r)>-1&&(n=t)})),n}(r.href,e);l(o)&&!0!==r.visited&&o&&(d(r,o),n=!0)}})),n}(e);if(r.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void u();n?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),u())},50,s=0,function(){var e=this,r=arguments,t=function(){return n.apply(e,r)};clearTimeout(s),s=setTimeout(t,50)}}},618:function(e){e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var r=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",n=e.replace(new RegExp(r,"i"),"").split("/"),t=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",r+t+n.reduce((function(e,r){switch(r){case"..":e.pop();break;case".":break;default:e.push(r)}return e}),[]).join("/")}},289:function(e,r,n){var t=n(783)(e.id,{locals:!1});e.hot.dispose(t),e.hot.accept(void 0,t)},351:function(e,r,n){n(289);const t=document.getElementById("nameInput"),o=document.getElementById("roomSelect");document.getElementById("startBtn").addEventListener("click",(()=>{const e=t.value,r=o.value;location.href=`/chatRoom/chatRoom.html?user_name=${e}&room_name=${r}`}))}},d={};function u(e){var r=d[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var n=d[e]={id:e,exports:{}};try{var t={id:e,module:n,factory:a[e],require:u};u.i.forEach((function(e){e(t)})),n=t.module,t.factory.call(n.exports,n,n.exports,t.require)}catch(e){throw n.error=e,e}return n.exports}u.m=a,u.c=d,u.i=[],u.hu=function(e){return e+"."+u.h()+".hot-update.js"},u.miniCssF=function(e){},u.hmrF=function(){return"main."+u.h()+".hot-update.json"},u.h=function(){return"12f74065f76925766960"},u.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},e={},r="webpackproject:",u.l=function(n,t,o,i){if(e[n])e[n].push(t);else{var c,a;if(void 0!==o)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var s=d[l];if(s.getAttribute("src")==n||s.getAttribute("data-webpack")==r+o){c=s;break}}c||(a=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,u.nc&&c.setAttribute("nonce",u.nc),c.setAttribute("data-webpack",r+o),c.src=n),e[n]=[t];var f=function(r,t){c.onerror=c.onload=null,clearTimeout(p);var o=e[n];if(delete e[n],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((function(e){return e(t)})),r)return r(t)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=f.bind(null,c.onerror),c.onload=f.bind(null,c.onload),a&&document.head.appendChild(c)}},function(){var e,r,n,t,o={},i=u.c,c=[],a=[],d="idle";function l(e){d=e;for(var r=0;r<a.length;r++)a[r].call(null,e)}function s(e){if(0===r.length)return e();var n=r;return r=[],Promise.all(n).then((function(){return s(e)}))}function f(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return l("check"),u.hmrM().then((function(t){if(!t)return l(m()?"ready":"idle"),null;l("prepare");var o=[];return r=[],n=[],Promise.all(Object.keys(u.hmrC).reduce((function(e,r){return u.hmrC[r](t.c,t.r,t.m,e,n,o),e}),[])).then((function(){return s((function(){return e?h(e):(l("ready"),o)}))}))}))}function p(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},m();var r=n.map((function(r){return r(e)}));n=void 0;var o,i=r.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),r.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var c=function(e){o||(o=e)},a=[];return r.forEach((function(e){if(e.apply){var r=e.apply(c);if(r)for(var n=0;n<r.length;n++)a.push(r[n])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):t?h(e).then((function(e){return a.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):(l("idle"),Promise.resolve(a))}function m(){if(t)return n||(n=[]),Object.keys(u.hmrI).forEach((function(e){t.forEach((function(r){u.hmrI[e](r,n)}))})),t=void 0,!0}u.hmrD=o,u.i.push((function(h){var m,v,y,g,E=h.module,b=function(n,t){var o=i[t];if(!o)return n;var a=function(r){if(o.hot.active){if(i[r]){var a=i[r].parents;-1===a.indexOf(t)&&a.push(t)}else c=[t],e=r;-1===o.children.indexOf(r)&&o.children.push(r)}else console.warn("[HMR] unexpected require("+r+") from disposed module "+t),c=[];return n(r)},u=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(r){n[e]=r}}};for(var f in n)Object.prototype.hasOwnProperty.call(n,f)&&"e"!==f&&Object.defineProperty(a,f,u(f));return a.e=function(e){return function(e){switch(d){case"ready":return l("prepare"),r.push(e),s((function(){l("ready")})),e;case"prepare":return r.push(e),e;default:return e}}(n.e(e))},a}(h.require,h.id);E.hot=(m=h.id,v=E,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){c=v.parents.slice(),e=y?void 0:m,u(m)},active:!0,accept:function(e,r,n){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._acceptedDependencies[e[t]]=r||function(){},g._acceptedErrorHandlers[e[t]]=n;else g._acceptedDependencies[e]=r||function(){},g._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)g._declinedDependencies[e[r]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=g._disposeHandlers.indexOf(e);r>=0&&g._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":n=[],Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](m,n)})),l("ready");break;case"ready":Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](m,n)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(m)}},check:f,apply:p,status:function(e){if(!e)return d;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var r=a.indexOf(e);r>=0&&a.splice(r,1)},data:o[m]},e=void 0,g),E.parents=c,E.children=[],c=[],h.require=b})),u.hmrC={},u.hmrI={}}(),u.p="/",n=function(e,r,n,t){var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=function(i){if(o.onerror=o.onload=null,"load"===i.type)n();else{var c=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||r,d=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=c,d.request=a,o.parentNode.removeChild(o),t(d)}},o.href=r,document.head.appendChild(o),o},t=function(e,r){for(var n=document.getElementsByTagName("link"),t=0;t<n.length;t++){var o=(c=n[t]).getAttribute("data-href")||c.getAttribute("href");if("stylesheet"===c.rel&&(o===e||o===r))return c}var i=document.getElementsByTagName("style");for(t=0;t<i.length;t++){var c;if((o=(c=i[t]).getAttribute("data-href"))===e||o===r)return c}},o=[],i=[],c=function(e){return{dispose:function(){for(var e=0;e<o.length;e++){var r=o[e];r.parentNode&&r.parentNode.removeChild(r)}o.length=0},apply:function(){for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}},u.hmrC.miniCss=function(e,r,a,d,l,s){l.push(c),e.forEach((function(e){var r=u.miniCssF(e),c=u.p+r,a=t(r,c);a&&d.push(new Promise((function(r,t){var d=n(e,c,(function(){d.as="style",d.rel="preload",r()}),t);o.push(a),i.push(d)})))}))},function(){var e,r,n,t,o={179:0},i={};function c(e){return new Promise((function(r,n){i[e]=r;var t=u.p+u.hu(e),o=new Error;u.l(t,(function(r){if(i[e]){i[e]=void 0;var t=r&&("load"===r.type?"missing":r.type),c=r&&r.target&&r.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+t+": "+c+")",o.name="ChunkLoadError",o.type=t,o.request=c,n(o)}}))}))}function a(i){function c(e){for(var r=[e],n={},t=r.map((function(e){return{chain:[e],id:e}}));t.length>0;){var o=t.pop(),i=o.id,c=o.chain,d=u.c[i];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var l=0;l<d.parents.length;l++){var s=d.parents[l],f=u.c[s];if(f){if(f.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([s]),moduleId:i,parentId:s};-1===r.indexOf(s)&&(f.hot._acceptedDependencies[i]?(n[s]||(n[s]=[]),a(n[s],[i])):(delete n[s],r.push(s),t.push({chain:c.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:n}}function a(e,r){for(var n=0;n<r.length;n++){var t=r[n];-1===e.indexOf(t)&&e.push(t)}}u.f&&delete u.f.jsonpHmr,e=void 0;var d={},l=[],s={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(u.o(r,p)){var h,m=r[p],v=!1,y=!1,g=!1,E="";switch((h=m?c(p):{type:"disposed",moduleId:p}).chain&&(E="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+E));break;case"declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+E));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(h),i.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+E));break;case"accepted":i.onAccepted&&i.onAccepted(h),y=!0;break;case"disposed":i.onDisposed&&i.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(p in s[p]=m,a(l,h.outdatedModules),h.outdatedDependencies)u.o(h.outdatedDependencies,p)&&(d[p]||(d[p]=[]),a(d[p],h.outdatedDependencies[p]));g&&(a(l,[h.moduleId]),s[p]=f)}r=void 0;for(var b,w=[],_=0;_<l.length;_++){var I=l[_],k=u.c[I];k&&(k.hot._selfAccepted||k.hot._main)&&s[I]!==f&&!k.hot._selfInvalidated&&w.push({module:I,require:k.hot._requireSelf,errorHandler:k.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete o[e]})),n=void 0;for(var r,t=l.slice();t.length>0;){var i=t.pop(),c=u.c[i];if(c){var a={},s=c.hot._disposeHandlers;for(_=0;_<s.length;_++)s[_].call(null,a);for(u.hmrD[i]=a,c.hot.active=!1,delete u.c[i],delete d[i],_=0;_<c.children.length;_++){var f=u.c[c.children[_]];f&&(e=f.parents.indexOf(i))>=0&&f.parents.splice(e,1)}}}for(var p in d)if(u.o(d,p)&&(c=u.c[p]))for(b=d[p],_=0;_<b.length;_++)r=b[_],(e=c.children.indexOf(r))>=0&&c.children.splice(e,1)},apply:function(e){for(var r in s)u.o(s,r)&&(u.m[r]=s[r]);for(var n=0;n<t.length;n++)t[n](u);for(var o in d)if(u.o(d,o)){var c=u.c[o];if(c){b=d[o];for(var a=[],f=[],p=[],h=0;h<b.length;h++){var m=b[h],v=c.hot._acceptedDependencies[m],y=c.hot._acceptedErrorHandlers[m];if(v){if(-1!==a.indexOf(v))continue;a.push(v),f.push(y),p.push(m)}}for(var g=0;g<a.length;g++)try{a[g].call(null,b)}catch(r){if("function"==typeof f[g])try{f[g](r,{moduleId:o,dependencyId:p[g]})}catch(n){i.onErrored&&i.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:p[g],error:n,originalError:r}),i.ignoreErrored||(e(n),e(r))}else i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:p[g],error:r}),i.ignoreErrored||e(r)}}}for(var E=0;E<w.length;E++){var _=w[E],I=_.module;try{_.require(I)}catch(r){if("function"==typeof _.errorHandler)try{_.errorHandler(r,{moduleId:I,module:u.c[I]})}catch(n){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:I,error:n,originalError:r}),i.ignoreErrored||(e(n),e(r))}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:I,error:r}),i.ignoreErrored||e(r)}}return l}}}self.webpackHotUpdatewebpackproject=function(e,n,o){for(var c in n)u.o(n,c)&&(r[c]=n[c]);o&&t.push(o),i[e]&&(i[e](),i[e]=void 0)},u.hmrI.jsonp=function(e,o){r||(r={},t=[],n=[],o.push(a)),u.o(r,e)||(r[e]=u.m[e])},u.hmrC.jsonp=function(i,d,l,s,f,p){f.push(a),e={},n=d,r=l.reduce((function(e,r){return e[r]=!1,e}),{}),t=[],i.forEach((function(r){u.o(o,r)&&void 0!==o[r]&&(s.push(c(r)),e[r]=!0)})),u.f&&(u.f.jsonpHmr=function(r,n){e&&!u.o(e,r)&&u.o(o,r)&&void 0!==o[r]&&(n.push(c(r)),e[r]=!0)})},u.hmrM=function(){if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(u.p+u.hmrF()).then((function(e){if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}}(),u(351)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrcHJvamVjdC93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vd2VicGFja3Byb2plY3Qvd2VicGFjay9ydW50aW1lL2NzcyBsb2FkaW5nIiwid2VicGFjazovL3dlYnBhY2twcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIiwid2VicGFjazovL3dlYnBhY2twcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL25vcm1hbGl6ZS11cmwuanMiLCJ3ZWJwYWNrOi8vd2VicGFja3Byb2plY3QvLi9zcmMvY2xpZW50L3BhZ2VzL21haW4vaW5kZXguY3NzPzliOGQiLCJ3ZWJwYWNrOi8vd2VicGFja3Byb2plY3QvLi9zcmMvY2xpZW50L3BhZ2VzL21haW4vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vd2VicGFja3Byb2plY3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd2VicGFja3Byb2plY3Qvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IHVwZGF0ZSBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly93ZWJwYWNrcHJvamVjdC93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3dlYnBhY2twcm9qZWN0L3dlYnBhY2svcnVudGltZS9nZXQgdXBkYXRlIG1hbmlmZXN0IGZpbGVuYW1lIiwid2VicGFjazovL3dlYnBhY2twcm9qZWN0L3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCIsIndlYnBhY2s6Ly93ZWJwYWNrcHJvamVjdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dlYnBhY2twcm9qZWN0L3dlYnBhY2svcnVudGltZS9ob3QgbW9kdWxlIHJlcGxhY2VtZW50Iiwid2VicGFjazovL3dlYnBhY2twcm9qZWN0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dlYnBhY2twcm9qZWN0L3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dlYnBhY2twcm9qZWN0L3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJjcmVhdGVTdHlsZXNoZWV0IiwiZmluZFN0eWxlc2hlZXQiLCJvbGRUYWdzIiwibmV3VGFncyIsImFwcGx5SGFuZGxlciIsIm5vcm1hbGl6ZVVybCIsInNyY0J5TW9kdWxlSWQiLCJPYmplY3QiLCJjcmVhdGUiLCJub0RvY3VtZW50IiwiZG9jdW1lbnQiLCJmb3JFYWNoIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJub29wIiwidXBkYXRlQ3NzIiwiZWwiLCJ1cmwiLCJocmVmIiwic3BsaXQiLCJpc1VybFJlcXVlc3QiLCJpc0xvYWRlZCIsImluZGV4T2YiLCJ2aXNpdGVkIiwibmV3RWwiLCJjbG9uZU5vZGUiLCJhZGRFdmVudExpc3RlbmVyIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY29uY2F0IiwiRGF0ZSIsIm5vdyIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJyZWxvYWRBbGwiLCJlbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjYWxsIiwidGVzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGVJZCIsIm9wdGlvbnMiLCJjb25zb2xlIiwibG9nIiwiZm4iLCJ0aW1lb3V0IiwiZ2V0U2NyaXB0U3JjIiwic3JjIiwiY3VycmVudFNjcmlwdCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxhc3RTY3JpcHRUYWciLCJsZW5ndGgiLCJmaWxlTWFwIiwic3BsaXRSZXN1bHQiLCJmaWxlbmFtZSIsIm1hcCIsIm1hcFJ1bGUiLCJyZWciLCJSZWdFeHAiLCJyZXBsYWNlIiwiZ2V0Q3VycmVudFNjcmlwdFVybCIsInJlbG9hZGVkIiwibG9hZGVkIiwicmV0Iiwic3RyaXBXV1ciLCJzb21lIiwiZ2V0UmVsb2FkVXJsIiwicmVsb2FkU3R5bGUiLCJsb2NhbHMiLCJqb2luIiwic2VsZiIsInRoaXMiLCJhcmdzIiwiYXJndW1lbnRzIiwiZnVuY3Rpb25DYWxsIiwiYXBwbHkiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwidXJsU3RyaW5nIiwidHJpbSIsInByb3RvY29sIiwiY29tcG9uZW50cyIsImhvc3QiLCJ0b0xvd2VyQ2FzZSIsInJlZHVjZSIsImFjY3VtdWxhdG9yIiwiaXRlbSIsInBvcCIsInB1c2giLCJjc3NSZWxvYWQiLCJpZCIsImhvdCIsImRpc3Bvc2UiLCJhY2NlcHQiLCJ1bmRlZmluZWQiLCJuYW1lSW5wdXQiLCJnZXRFbGVtZW50QnlJZCIsInJvb21TZWxlY3QiLCJ1c2VyTmFtZSIsInZhbHVlIiwicm9vbU5hbWUiLCJsb2NhdGlvbiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJjYWNoZWRNb2R1bGUiLCJlcnJvciIsImV4ZWNPcHRpb25zIiwiZmFjdG9yeSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJyZXF1aXJlIiwiaSIsImhhbmRsZXIiLCJlIiwibSIsImMiLCJodSIsImNodW5rSWQiLCJoIiwibWluaUNzc0YiLCJobXJGIiwibyIsIm9iaiIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImwiLCJkb25lIiwia2V5Iiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInMiLCJnZXRBdHRyaWJ1dGUiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsIm5jIiwic2V0QXR0cmlidXRlIiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJkb25lRm5zIiwiYmluZCIsInR5cGUiLCJ0YXJnZXQiLCJoZWFkIiwiY3VycmVudENoaWxkTW9kdWxlIiwiYmxvY2tpbmdQcm9taXNlcyIsImN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzIiwicXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIiwiY3VycmVudE1vZHVsZURhdGEiLCJpbnN0YWxsZWRNb2R1bGVzIiwiY3VycmVudFBhcmVudHMiLCJyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMiLCJjdXJyZW50U3RhdHVzIiwic2V0U3RhdHVzIiwibmV3U3RhdHVzIiwid2FpdEZvckJsb2NraW5nUHJvbWlzZXMiLCJibG9ja2VyIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJob3RDaGVjayIsImFwcGx5T25VcGRhdGUiLCJFcnJvciIsImhtck0iLCJ1cGRhdGUiLCJhcHBseUludmFsaWRhdGVkTW9kdWxlcyIsInVwZGF0ZWRNb2R1bGVzIiwia2V5cyIsImhtckMiLCJwcm9taXNlcyIsInIiLCJpbnRlcm5hbEFwcGx5IiwiaG90QXBwbHkiLCJyZXNvbHZlIiwicmVzdWx0cyIsImVycm9ycyIsImZpbHRlciIsIkJvb2xlYW4iLCJyZXN1bHQiLCJyZXBvcnRFcnJvciIsImVyciIsIm91dGRhdGVkTW9kdWxlcyIsIm1vZHVsZXMiLCJsaXN0IiwiaG1ySSIsImhtckQiLCJtZSIsIl9tYWluIiwicmVxdWVzdCIsImFjdGl2ZSIsInBhcmVudHMiLCJjaGlsZHJlbiIsIndhcm4iLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJuYW1lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsImRlZmluZVByb3BlcnR5IiwicHJvbWlzZSIsInRyYWNrQmxvY2tpbmdQcm9taXNlIiwiY3JlYXRlUmVxdWlyZSIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsIl9hY2NlcHRlZEVycm9ySGFuZGxlcnMiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsIl9zZWxmSW52YWxpZGF0ZWQiLCJfZGlzcG9zZUhhbmRsZXJzIiwiX3JlcXVpcmVTZWxmIiwic2xpY2UiLCJkZXAiLCJjYWxsYmFjayIsImVycm9ySGFuZGxlciIsImRlY2xpbmUiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4Iiwic3BsaWNlIiwiaW52YWxpZGF0ZSIsImNoZWNrIiwic3RhdHVzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJkYXRhIiwicCIsImZ1bGxocmVmIiwicmVqZWN0IiwibGlua1RhZyIsInJlbCIsImVycm9yVHlwZSIsInJlYWxIcmVmIiwiY29kZSIsImV4aXN0aW5nTGlua1RhZ3MiLCJkYXRhSHJlZiIsInRhZyIsImV4aXN0aW5nU3R5bGVUYWdzIiwib2xkVGFnIiwibWluaUNzcyIsImNodW5rSWRzIiwicmVtb3ZlZENodW5rcyIsInJlbW92ZWRNb2R1bGVzIiwiYXBwbHlIYW5kbGVycyIsInVwZGF0ZWRNb2R1bGVzTGlzdCIsImFzIiwiY3VycmVudFVwZGF0ZUNodW5rcyIsImN1cnJlbnRVcGRhdGUiLCJjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyIsImN1cnJlbnRVcGRhdGVSdW50aW1lIiwiaW5zdGFsbGVkQ2h1bmtzIiwiMTc5Iiwid2FpdGluZ1VwZGF0ZVJlc29sdmVzIiwibG9hZFVwZGF0ZUNodW5rIiwicmVhbFNyYyIsIm1lc3NhZ2UiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwicGFyZW50IiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsImYiLCJqc29ucEhtciIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJuZXdNb2R1bGVGYWN0b3J5IiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImoiLCJvdXRkYXRlZE1vZHVsZUlkIiwiZGVwZW5kZW5jeSIsImRpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwiY2FsbGJhY2tzIiwiZXJyb3JIYW5kbGVycyIsImRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyIsImFjY2VwdENhbGxiYWNrIiwiayIsImRlcGVuZGVuY3lJZCIsImVycjIiLCJvbkVycm9yZWQiLCJvcmlnaW5hbEVycm9yIiwiaWdub3JlRXJyb3JlZCIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImpzb25wIiwiZmV0Y2giLCJyZXNwb25zZSIsIm9rIiwic3RhdHVzVGV4dCIsImpzb24iXSwibWFwcGluZ3MiOiI2QkFBSUEsRUFDQUMsRUNEQUMsRUEyQkFDLEVBd0JBQyxFQUNBQyxFQUNBQyxFLHVCQzVDSixJQUFJQyxFQUFlLEVBQVEsS0FFdkJDLEVBQWdCQyxPQUFPQyxPQUFPLE1BQzlCQyxFQUFpQyxvQkFBYkMsU0FDcEJDLEVBQVVDLE1BQU1DLFVBQVVGLFFBa0I5QixTQUFTRyxLQTJDVCxTQUFTQyxFQUFVQyxFQUFJQyxHQUNyQixJQUFLQSxFQUFLLENBQ1IsSUFBS0QsRUFBR0UsS0FDTixPQUlGRCxFQUFNRCxFQUFHRSxLQUFLQyxNQUFNLEtBQUssR0FHM0IsR0FBS0MsRUFBYUgsS0FJRSxJQUFoQkQsRUFBR0ssVUFNRkosR0FBU0EsRUFBSUssUUFBUSxTQUFXLEVBQXJDLENBS0FOLEVBQUdPLFNBQVUsRUFDYixJQUFJQyxFQUFRUixFQUFHUyxZQUNmRCxFQUFNSCxVQUFXLEVBQ2pCRyxFQUFNRSxpQkFBaUIsUUFBUSxXQUN6QkYsRUFBTUgsV0FJVkcsRUFBTUgsVUFBVyxFQUNqQkwsRUFBR1csV0FBV0MsWUFBWVosT0FFNUJRLEVBQU1FLGlCQUFpQixTQUFTLFdBQzFCRixFQUFNSCxXQUlWRyxFQUFNSCxVQUFXLEVBQ2pCTCxFQUFHVyxXQUFX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SyxFQUFnQjFJLElBQzlCbUksRUFBb0JuSSxJQUFXLE1BRzdCYixFQUFvQnFLLElBQ3ZCckssRUFBb0JxSyxFQUFFQyxTQUFXLFNBQVV6SixFQUFTc0QsR0FFbEQ2RSxJQUNDaEosRUFBb0JpQixFQUFFK0gsRUFBcUJuSSxJQUM1Q2IsRUFBb0JpQixFQUFFbUksRUFBaUJ2SSxTQUNWdEIsSUFBN0I2SixFQUFnQnZJLEtBRWhCc0QsRUFBU2xGLEtBQUtzSyxFQUFnQjFJLElBQzlCbUksRUFBb0JuSSxJQUFXLE1BTW5DYixFQUFvQjZELEtBQU8sV0FDMUIsR0FBcUIsb0JBQVYySSxNQUF1QixNQUFNLElBQUk1SSxNQUFNLHNDQUNsRCxPQUFPNEksTUFBTXhNLEVBQW9CNEgsRUFBSTVILEVBQW9CZ0IsUUFBUXlDLE1BQUssU0FBU2dKLEdBQzlFLEdBQXVCLE1BQXBCQSxFQUFTakYsT0FBWixDQUNBLElBQUlpRixFQUFTQyxHQUFJLE1BQU0sSUFBSTlJLE1BQU0sbUNBQXFDNkksRUFBU0UsWUFDL0UsT0FBT0YsRUFBU0csWSxHQ25mUTVNLEVBQW9CLEsiLCJmaWxlIjoibWFpbi9pbmRleC4xMmY3NDA2NWY3NjkyNTc2Njk2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcIndlYnBhY2twcm9qZWN0OlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSBmdW5jdGlvbih1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gZnVuY3Rpb24ocHJldiwgZXZlbnQpIHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKGZ1bmN0aW9uKGZuKSB7IHJldHVybiBmbihldmVudCk7IH0pO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHQ7XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsInZhciBjcmVhdGVTdHlsZXNoZWV0ID0gZnVuY3Rpb24oY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCkge1xuXHR2YXIgbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdGxpbmtUYWcudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0dmFyIG9uTGlua0NvbXBsZXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdHZhciByZWFsSHJlZiA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuaHJlZiB8fCBmdWxsaHJlZjtcblx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgcmVhbEhyZWYgKyBcIilcIik7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuXHRyZXR1cm4gbGlua1RhZztcbn07XG52YXIgZmluZFN0eWxlc2hlZXQgPSBmdW5jdGlvbihocmVmLCBmdWxsaHJlZikge1xuXHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gdGFnO1xuXHR9XG5cdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuXHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHRhZztcblx0fVxufTtcbnZhciBsb2FkU3R5bGVzaGVldCA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGlmKGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKSkgcmV0dXJuIHJlc29sdmUoKTtcblx0XHRjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpO1xuXHR9KTtcbn1cbi8vIG5vIGNodW5rIGxvYWRpbmdcblxudmFyIG9sZFRhZ3MgPSBbXTtcbnZhciBuZXdUYWdzID0gW107XG52YXIgYXBwbHlIYW5kbGVyID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXHRyZXR1cm4geyBkaXNwb3NlOiBmdW5jdGlvbigpIHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgb2xkVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIG9sZFRhZyA9IG9sZFRhZ3NbaV07XG5cdFx0XHRpZihvbGRUYWcucGFyZW50Tm9kZSkgb2xkVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2xkVGFnKTtcblx0XHR9XG5cdFx0b2xkVGFncy5sZW5ndGggPSAwO1xuXHR9LCBhcHBseTogZnVuY3Rpb24oKSB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG5ld1RhZ3MubGVuZ3RoOyBpKyspIG5ld1RhZ3NbaV0ucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdFx0bmV3VGFncy5sZW5ndGggPSAwO1xuXHR9IH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMubWluaUNzcyA9IGZ1bmN0aW9uKGNodW5rSWRzLCByZW1vdmVkQ2h1bmtzLCByZW1vdmVkTW9kdWxlcywgcHJvbWlzZXMsIGFwcGx5SGFuZGxlcnMsIHVwZGF0ZWRNb2R1bGVzTGlzdCkge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y2h1bmtJZHMuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0dmFyIG9sZFRhZyA9IGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKTtcblx0XHRpZighb2xkVGFnKSByZXR1cm47XG5cdFx0cHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdHZhciB0YWcgPSBjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGFnLmFzID0gXCJzdHlsZVwiO1xuXHRcdFx0XHR0YWcucmVsID0gXCJwcmVsb2FkXCI7XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH0sIHJlamVjdCk7XG5cdFx0XHRvbGRUYWdzLnB1c2gob2xkVGFnKTtcblx0XHRcdG5ld1RhZ3MucHVzaCh0YWcpO1xuXHRcdH0pKTtcblx0fSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKlxuICBlc2xpbnQtZGlzYWJsZVxuICBuby1jb25zb2xlLFxuICBmdW5jLW5hbWVzXG4qL1xudmFyIG5vcm1hbGl6ZVVybCA9IHJlcXVpcmUoJy4vbm9ybWFsaXplLXVybCcpO1xuXG52YXIgc3JjQnlNb2R1bGVJZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG52YXIgbm9Eb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCc7XG52YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgdGltZSkge1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG5cbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmdW5jdGlvbkNhbGwgPSBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfTtcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbkNhbGwsIHRpbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCkge1xuICB2YXIgc3JjID0gc3JjQnlNb2R1bGVJZFttb2R1bGVJZF07XG5cbiAgaWYgKCFzcmMpIHtcbiAgICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCkge1xuICAgICAgc3JjID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICAgICAgdmFyIGxhc3RTY3JpcHRUYWcgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChsYXN0U2NyaXB0VGFnKSB7XG4gICAgICAgIHNyYyA9IGxhc3RTY3JpcHRUYWcuc3JjO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdID0gc3JjO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmaWxlTWFwKSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzcGxpdFJlc3VsdCA9IHNyYy5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTtcbiAgICB2YXIgZmlsZW5hbWUgPSBzcGxpdFJlc3VsdCAmJiBzcGxpdFJlc3VsdFsxXTtcblxuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoJy5qcycsICcuY3NzJyldO1xuICAgIH1cblxuICAgIGlmICghZmlsZU1hcCkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZSgnLmpzJywgJy5jc3MnKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGVNYXAuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKG1hcFJ1bGUpIHtcbiAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KGZpbGVuYW1lLCBcIlxcXFwuanMkXCIpLCAnZycpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVVybChzcmMucmVwbGFjZShyZWcsIFwiXCIuY29uY2F0KG1hcFJ1bGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLCBmaWxlbmFtZSksIFwiLmNzc1wiKSkpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDc3MoZWwsIHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cblxuICAgIHVybCA9IGVsLmhyZWYuc3BsaXQoJz8nKVswXTtcbiAgfVxuXG4gIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWwuaXNMb2FkZWQgPT09IGZhbHNlKSB7XG4gICAgLy8gV2Ugc2VlbSB0byBiZSBhYm91dCB0byByZXBsYWNlIGEgY3NzIGxpbmsgdGhhdCBoYXNuJ3QgbG9hZGVkIHlldC5cbiAgICAvLyBXZSdyZSBwcm9iYWJseSBjaGFuZ2luZyB0aGUgc2FtZSBmaWxlIG1vcmUgdGhhbiBvbmNlLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghdXJsIHx8ICEodXJsLmluZGV4T2YoJy5jc3MnKSA+IC0xKSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIGVsLnZpc2l0ZWQgPSB0cnVlO1xuICB2YXIgbmV3RWwgPSBlbC5jbG9uZU5vZGUoKTtcbiAgbmV3RWwuaXNMb2FkZWQgPSBmYWxzZTtcbiAgbmV3RWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobmV3RWwuaXNMb2FkZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobmV3RWwuaXNMb2FkZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5ocmVmID0gXCJcIi5jb25jYXQodXJsLCBcIj9cIikuY29uY2F0KERhdGUubm93KCkpO1xuXG4gIGlmIChlbC5uZXh0U2libGluZykge1xuICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0VsLCBlbC5uZXh0U2libGluZyk7XG4gIH0gZWxzZSB7XG4gICAgZWwucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChuZXdFbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmVsb2FkVXJsKGhyZWYsIHNyYykge1xuICB2YXIgcmV0OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuICBocmVmID0gbm9ybWFsaXplVXJsKGhyZWYsIHtcbiAgICBzdHJpcFdXVzogZmFsc2VcbiAgfSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJheS1jYWxsYmFjay1yZXR1cm5cblxuICBzcmMuc29tZShmdW5jdGlvbiAodXJsKSB7XG4gICAgaWYgKGhyZWYuaW5kZXhPZihzcmMpID4gLTEpIHtcbiAgICAgIHJldCA9IHVybDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiByZWxvYWRTdHlsZShzcmMpIHtcbiAgaWYgKCFzcmMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyk7XG4gIHZhciBsb2FkZWQgPSBmYWxzZTtcbiAgZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoIWVsLmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdXJsID0gZ2V0UmVsb2FkVXJsKGVsLmhyZWYsIHNyYyk7XG5cbiAgICBpZiAoIWlzVXJsUmVxdWVzdCh1cmwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodXJsKSB7XG4gICAgICB1cGRhdGVDc3MoZWwsIHVybCk7XG4gICAgICBsb2FkZWQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsb2FkZWQ7XG59XG5cbmZ1bmN0aW9uIHJlbG9hZEFsbCgpIHtcbiAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGluaycpO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbC52aXNpdGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdXBkYXRlQ3NzKGVsKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzVXJsUmVxdWVzdCh1cmwpIHtcbiAgLy8gQW4gVVJMIGlzIG5vdCBhbiByZXF1ZXN0IGlmXG4gIC8vIEl0IGlzIG5vdCBodHRwIG9yIGh0dHBzXG4gIGlmICghL15odHRwcz86L2kudGVzdCh1cmwpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBvcHRpb25zKSB7XG4gIGlmIChub0RvY3VtZW50KSB7XG4gICAgY29uc29sZS5sb2coJ25vIHdpbmRvdy5kb2N1bWVudCBmb3VuZCwgd2lsbCBub3QgSE1SIENTUycpO1xuICAgIHJldHVybiBub29wO1xuICB9XG5cbiAgdmFyIGdldFNjcmlwdFNyYyA9IGdldEN1cnJlbnRTY3JpcHRVcmwobW9kdWxlSWQpO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgc3JjID0gZ2V0U2NyaXB0U3JjKG9wdGlvbnMuZmlsZW5hbWUpO1xuICAgIHZhciByZWxvYWRlZCA9IHJlbG9hZFN0eWxlKHNyYyk7XG5cbiAgICBpZiAob3B0aW9ucy5sb2NhbHMpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbSE1SXSBEZXRlY3RlZCBsb2NhbCBjc3MgbW9kdWxlcy4gUmVsb2FkIGFsbCBjc3MnKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChyZWxvYWRlZCkge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIGNzcyByZWxvYWQgJXMnLCBzcmMuam9pbignICcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIFJlbG9hZCBhbGwgY3NzJyk7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVib3VuY2UodXBkYXRlLCA1MCk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuZnVuY3Rpb24gbm9ybWFsaXplVXJsKHBhdGhDb21wb25lbnRzKSB7XG4gIHJldHVybiBwYXRoQ29tcG9uZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBpdGVtKSB7XG4gICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICBjYXNlICcuLic6XG4gICAgICAgIGFjY3VtdWxhdG9yLnBvcCgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnLic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhY2N1bXVsYXRvci5wdXNoKGl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwgW10pLmpvaW4oJy8nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsU3RyaW5nKSB7XG4gIHVybFN0cmluZyA9IHVybFN0cmluZy50cmltKCk7XG5cbiAgaWYgKC9eZGF0YTovaS50ZXN0KHVybFN0cmluZykpIHtcbiAgICByZXR1cm4gdXJsU3RyaW5nO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gdXJsU3RyaW5nLmluZGV4T2YoJy8vJykgIT09IC0xID8gdXJsU3RyaW5nLnNwbGl0KCcvLycpWzBdICsgJy8vJyA6ICcnO1xuICB2YXIgY29tcG9uZW50cyA9IHVybFN0cmluZy5yZXBsYWNlKG5ldyBSZWdFeHAocHJvdG9jb2wsICdpJyksICcnKS5zcGxpdCgnLycpO1xuICB2YXIgaG9zdCA9IGNvbXBvbmVudHNbMF0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXC4kLywgJycpO1xuICBjb21wb25lbnRzWzBdID0gJyc7XG4gIHZhciBwYXRoID0gbm9ybWFsaXplVXJsKGNvbXBvbmVudHMpO1xuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aDtcbn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTY0NjA5NTU2NDk1NVxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCJDOi9Vc2Vycy9BU1VTZXIvRGVza3RvcC9icnVjZV9mZV90eXBlc2NyaXB0LW1hc3Rlci1jaDEwLWNoYXRyb29tX3R1dG9yaWFsL2NoMTAvY2hhdHJvb21fdHV0b3JpYWwvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcblxuXG5jb25zdCBuYW1lSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZUlucHV0JykgYXMgSFRNTElucHV0RWxlbWVudFxuY29uc3Qgcm9vbVNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb29tU2VsZWN0JykgYXMgSFRNTFNlbGVjdEVsZW1lbnRcbmNvbnN0IHN0YXJ0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0QnRuJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnRcblxuc3RhcnRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gIGNvbnN0IHVzZXJOYW1lID0gbmFtZUlucHV0LnZhbHVlXG4gIGNvbnN0IHJvb21OYW1lID0gcm9vbVNlbGVjdC52YWx1ZVxuXG4gIGxvY2F0aW9uLmhyZWYgPSBgL2NoYXRSb29tL2NoYXRSb29tLmh0bWw/dXNlcl9uYW1lPSR7dXNlck5hbWV9JnJvb21fbmFtZT0ke3Jvb21OYW1lfWBcbn0pIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdGlmIChjYWNoZWRNb2R1bGUuZXJyb3IgIT09IHVuZGVmaW5lZCkgdGhyb3cgY2FjaGVkTW9kdWxlLmVycm9yO1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHR0cnkge1xuXHRcdHZhciBleGVjT3B0aW9ucyA9IHsgaWQ6IG1vZHVsZUlkLCBtb2R1bGU6IG1vZHVsZSwgZmFjdG9yeTogX193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0sIHJlcXVpcmU6IF9fd2VicGFja19yZXF1aXJlX18gfTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7IGhhbmRsZXIoZXhlY09wdGlvbnMpOyB9KTtcblx0XHRtb2R1bGUgPSBleGVjT3B0aW9ucy5tb2R1bGU7XG5cdFx0ZXhlY09wdGlvbnMuZmFjdG9yeS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBleGVjT3B0aW9ucy5yZXF1aXJlKTtcblx0fSBjYXRjaChlKSB7XG5cdFx0bW9kdWxlLmVycm9yID0gZTtcblx0XHR0aHJvdyBlO1xuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgZXhlY3V0aW9uIGludGVyY2VwdG9yXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBbXTtcblxuIiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5odSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSBmdW5jdGlvbihjaHVua0lkKSB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFwibWFpbi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7IH07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIjEyZjc0MDY1Zjc2OTI1NzY2OTYwXCI7IH0iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwidmFyIGN1cnJlbnRNb2R1bGVEYXRhID0ge307XG52YXIgaW5zdGFsbGVkTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18uYztcblxuLy8gbW9kdWxlIGFuZCByZXF1aXJlIGNyZWF0aW9uXG52YXIgY3VycmVudENoaWxkTW9kdWxlO1xudmFyIGN1cnJlbnRQYXJlbnRzID0gW107XG5cbi8vIHN0YXR1c1xudmFyIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyA9IFtdO1xudmFyIGN1cnJlbnRTdGF0dXMgPSBcImlkbGVcIjtcblxuLy8gd2hpbGUgZG93bmxvYWRpbmdcbnZhciBibG9ja2luZ1Byb21pc2VzO1xuXG4vLyBUaGUgdXBkYXRlIGluZm9cbnZhciBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycztcbnZhciBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXM7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJEID0gY3VycmVudE1vZHVsZURhdGE7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaS5wdXNoKGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdHZhciBtb2R1bGUgPSBvcHRpb25zLm1vZHVsZTtcblx0dmFyIHJlcXVpcmUgPSBjcmVhdGVSZXF1aXJlKG9wdGlvbnMucmVxdWlyZSwgb3B0aW9ucy5pZCk7XG5cdG1vZHVsZS5ob3QgPSBjcmVhdGVNb2R1bGVIb3RPYmplY3Qob3B0aW9ucy5pZCwgbW9kdWxlKTtcblx0bW9kdWxlLnBhcmVudHMgPSBjdXJyZW50UGFyZW50cztcblx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdG9wdGlvbnMucmVxdWlyZSA9IHJlcXVpcmU7XG59KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDID0ge307XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZShyZXF1aXJlLCBtb2R1bGVJZCkge1xuXHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblx0aWYgKCFtZSkgcmV0dXJuIHJlcXVpcmU7XG5cdHZhciBmbiA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG5cdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcblx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRzID0gaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzO1xuXHRcdFx0XHRpZiAocGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRwYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG5cdFx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG5cdFx0XHR9XG5cdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcblx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG5cdFx0XHRcdFx0cmVxdWVzdCArXG5cdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcblx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0KTtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdFx0fVxuXHRcdHJldHVybiByZXF1aXJlKHJlcXVlc3QpO1xuXHR9O1xuXHR2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gcmVxdWlyZVtuYW1lXTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRyZXF1aXJlW25hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblx0Zm9yICh2YXIgbmFtZSBpbiByZXF1aXJlKSB7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXF1aXJlLCBuYW1lKSAmJiBuYW1lICE9PSBcImVcIikge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSkpO1xuXHRcdH1cblx0fVxuXHRmbi5lID0gZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRyZXR1cm4gdHJhY2tCbG9ja2luZ1Byb21pc2UocmVxdWlyZS5lKGNodW5rSWQpKTtcblx0fTtcblx0cmV0dXJuIGZuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNb2R1bGVIb3RPYmplY3QobW9kdWxlSWQsIG1lKSB7XG5cdHZhciBfbWFpbiA9IGN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQ7XG5cdHZhciBob3QgPSB7XG5cdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuXHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG5cdFx0X2FjY2VwdGVkRXJyb3JIYW5kbGVyczoge30sXG5cdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcblx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcblx0XHRfc2VsZkludmFsaWRhdGVkOiBmYWxzZSxcblx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcblx0XHRfbWFpbjogX21haW4sXG5cdFx0X3JlcXVpcmVTZWxmOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IG1lLnBhcmVudHMuc2xpY2UoKTtcblx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IF9tYWluID8gdW5kZWZpbmVkIDogbW9kdWxlSWQ7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcblx0XHR9LFxuXG5cdFx0Ly8gTW9kdWxlIEFQSVxuXHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRhY2NlcHQ6IGZ1bmN0aW9uIChkZXAsIGNhbGxiYWNrLCBlcnJvckhhbmRsZXIpIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwW2ldXSA9IGVycm9ySGFuZGxlcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcF0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkZWNsaW5lOiBmdW5jdGlvbiAoZGVwKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuXHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuXHRcdH0sXG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXHRcdGludmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMuX3NlbGZJbnZhbGlkYXRlZCA9IHRydWU7XG5cdFx0XHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRcdFx0Y2FzZSBcImlkbGVcIjpcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdFx0Y2FzZSBcImNoZWNrXCI6XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlXCI6XG5cdFx0XHRcdGNhc2UgXCJhcHBseVwiOlxuXHRcdFx0XHRcdChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgfHwgW10pLnB1c2goXG5cdFx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Ly8gaWdub3JlIHJlcXVlc3RzIGluIGVycm9yIHN0YXRlc1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuXHRcdGNoZWNrOiBob3RDaGVjayxcblx0XHRhcHBseTogaG90QXBwbHksXG5cdFx0c3RhdHVzOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0aWYgKCFsKSByZXR1cm4gY3VycmVudFN0YXR1cztcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHZhciBpZHggPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcblx0XHRcdGlmIChpZHggPj0gMCkgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cblx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcblx0XHRkYXRhOiBjdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cblx0fTtcblx0Y3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuXHRyZXR1cm4gaG90O1xufVxuXG5mdW5jdGlvbiBzZXRTdGF0dXMobmV3U3RhdHVzKSB7XG5cdGN1cnJlbnRTdGF0dXMgPSBuZXdTdGF0dXM7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuXHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG59XG5cbmZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHtcblx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXHRcdFx0YmxvY2tpbmdQcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0d2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMucHVzaChwcm9taXNlKTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0fVxufVxuXG5mdW5jdGlvbiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbikge1xuXHRpZiAoYmxvY2tpbmdQcm9taXNlcy5sZW5ndGggPT09IDApIHJldHVybiBmbigpO1xuXHR2YXIgYmxvY2tlciA9IGJsb2NraW5nUHJvbWlzZXM7XG5cdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0cmV0dXJuIFByb21pc2UuYWxsKGJsb2NrZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbik7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBob3RDaGVjayhhcHBseU9uVXBkYXRlKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcImlkbGVcIikge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuXHR9XG5cdHNldFN0YXR1cyhcImNoZWNrXCIpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNKCkudGhlbihmdW5jdGlvbiAodXBkYXRlKSB7XG5cdFx0aWYgKCF1cGRhdGUpIHtcblx0XHRcdHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gXCJyZWFkeVwiIDogXCJpZGxlXCIpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0c2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcblxuXHRcdHZhciB1cGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRcdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDKS5yZWR1Y2UoZnVuY3Rpb24gKFxuXHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0a2V5XG5cdFx0XHQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJDW2tleV0oXG5cdFx0XHRcdFx0dXBkYXRlLmMsXG5cdFx0XHRcdFx0dXBkYXRlLnIsXG5cdFx0XHRcdFx0dXBkYXRlLm0sXG5cdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMsXG5cdFx0XHRcdFx0dXBkYXRlZE1vZHVsZXNcblx0XHRcdFx0KTtcblx0XHRcdFx0cmV0dXJuIHByb21pc2VzO1xuXHRcdFx0fSxcblx0XHRcdFtdKVxuXHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoYXBwbHlPblVwZGF0ZSkge1xuXHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHVwZGF0ZWRNb2R1bGVzO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwicmVhZHlcIikge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxBcHBseShvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cblx0dmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gaGFuZGxlcihvcHRpb25zKTtcblx0fSk7XG5cdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXG5cdHZhciBlcnJvcnMgPSByZXN1bHRzXG5cdFx0Lm1hcChmdW5jdGlvbiAocikge1xuXHRcdFx0cmV0dXJuIHIuZXJyb3I7XG5cdFx0fSlcblx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuXHRcdHNldFN0YXR1cyhcImFib3J0XCIpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yc1swXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuXHRzZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuXG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpO1xuXHR9KTtcblxuXHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG5cdHNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG5cdHZhciBlcnJvcjtcblx0dmFyIHJlcG9ydEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuXHR9O1xuXG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmFwcGx5KSB7XG5cdFx0XHR2YXIgbW9kdWxlcyA9IHJlc3VsdC5hcHBseShyZXBvcnRFcnJvcik7XG5cdFx0XHRpZiAobW9kdWxlcykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChtb2R1bGVzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcblx0aWYgKGVycm9yKSB7XG5cdFx0c2V0U3RhdHVzKFwiZmFpbFwiKTtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9KTtcblx0fVxuXG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG5cdFx0XHRvdXRkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0aWYgKGxpc3QuaW5kZXhPZihtb2R1bGVJZCkgPCAwKSBsaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gbGlzdDtcblx0XHR9KTtcblx0fVxuXG5cdHNldFN0YXR1cyhcImlkbGVcIik7XG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7XG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRpZiAoIWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzKSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG52YXIgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdDtcbnZhciB3YWl0aW5nVXBkYXRlUmVzb2x2ZXMgPSB7fTtcbmZ1bmN0aW9uIGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSByZXNvbHZlO1xuXHRcdC8vIHN0YXJ0IHVwZGF0ZSBjaHVuayBsb2FkaW5nXG5cdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaHUoY2h1bmtJZCk7XG5cdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdHZhciBsb2FkaW5nRW5kZWQgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0XHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZFxuXHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgaG90IHVwZGF0ZSBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCk7XG5cdH0pO1xufVxuXG5zZWxmW1wid2VicGFja0hvdFVwZGF0ZXdlYnBhY2twcm9qZWN0XCJdID0gZnVuY3Rpb24oY2h1bmtJZCwgbW9yZU1vZHVsZXMsIHJ1bnRpbWUpIHtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdGlmKGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QpIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIGN1cnJlbnRVcGRhdGVSdW50aW1lLnB1c2gocnVudGltZSk7XG5cdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpO1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0fVxufTtcblxudmFyIGN1cnJlbnRVcGRhdGVDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZTtcbnZhciBjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcztcbnZhciBjdXJyZW50VXBkYXRlUnVudGltZTtcbmZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7XG5cdGZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG5cdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbiAoaWQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNoYWluOiBbaWRdLFxuXHRcdFx0XHRpZDogaWRcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcblx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcblx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhbW9kdWxlIHx8XG5cdFx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZClcblx0XHRcdClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW3BhcmVudElkXTtcblx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcblx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuXHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG5cdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG5cdFx0XHRcdHF1ZXVlLnB1c2goe1xuXHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0aWQ6IHBhcmVudElkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG5cdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG5cdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcblx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IGJbaV07XG5cdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG5cdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cblx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuXHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgbW9kdWxlLmlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG5cdFx0KTtcblx0fTtcblxuXHRmb3IgKHZhciBtb2R1bGVJZCBpbiBjdXJyZW50VXBkYXRlKSB7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRcdHZhciBuZXdNb2R1bGVGYWN0b3J5ID0gY3VycmVudFVwZGF0ZVttb2R1bGVJZF07XG5cdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG5cdFx0XHR2YXIgcmVzdWx0O1xuXHRcdFx0aWYgKG5ld01vZHVsZUZhY3RvcnkpIHtcblx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKG1vZHVsZUlkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdCA9IHtcblx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuXHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcblx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG5cdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcblx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcblx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuXHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRlcnJvcjogYWJvcnRFcnJvclxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRvQXBwbHkpIHtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBuZXdNb2R1bGVGYWN0b3J5O1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuXHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ocmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcblx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Y3VycmVudFVwZGF0ZSA9IHVuZGVmaW5lZDtcblxuXHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG5cdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcblx0Zm9yICh2YXIgaiA9IDA7IGogPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBqKyspIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tqXTtcblx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdGlmIChcblx0XHRcdG1vZHVsZSAmJlxuXHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCB8fCBtb2R1bGUuaG90Ll9tYWluKSAmJlxuXHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuXHRcdFx0YXBwbGllZFVwZGF0ZVtvdXRkYXRlZE1vZHVsZUlkXSAhPT0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlICYmXG5cdFx0XHQvLyB3aGVuIGNhbGxlZCBpbnZhbGlkYXRlIHNlbGYtYWNjZXB0aW5nIGlzIG5vdCBwb3NzaWJsZVxuXHRcdFx0IW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZFxuXHRcdCkge1xuXHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuXHRcdFx0XHRtb2R1bGU6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdHJlcXVpcmU6IG1vZHVsZS5ob3QuX3JlcXVpcmVTZWxmLFxuXHRcdFx0XHRlcnJvckhhbmRsZXI6IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuXG5cdHJldHVybiB7XG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0fSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHVuZGVmaW5lZDtcblxuXHRcdFx0dmFyIGlkeDtcblx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG5cdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuXHRcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcblx0XHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdGRpc3Bvc2VIYW5kbGVyc1tqXS5jYWxsKG51bGwsIGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yRFttb2R1bGVJZF0gPSBkYXRhO1xuXG5cdFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG5cdFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG5cdFx0XHRcdGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZS5jaGlsZHJlbltqXV07XG5cdFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG5cdFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcblx0XHRcdFx0XHRpZiAoaWR4ID49IDApIHtcblx0XHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG5cdFx0XHR2YXIgZGVwZW5kZW5jeTtcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGFwcGx5OiBmdW5jdGlvbiAocmVwb3J0RXJyb3IpIHtcblx0XHRcdC8vIGluc2VydCBuZXcgY29kZVxuXHRcdFx0Zm9yICh2YXIgdXBkYXRlTW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGFwcGxpZWRVcGRhdGUsIHVwZGF0ZU1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVt1cGRhdGVNb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBydW4gbmV3IHJ1bnRpbWUgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyZW50VXBkYXRlUnVudGltZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlUnVudGltZVtpXShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHR2YXIgYWNjZXB0Q2FsbGJhY2sgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVyID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdGlmIChhY2NlcHRDYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihhY2NlcHRDYWxsYmFjaykgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChhY2NlcHRDYWxsYmFjayk7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVycy5wdXNoKGVycm9ySGFuZGxlcik7XG5cdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzLnB1c2goZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgY2FsbGJhY2tzLmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzW2tdLmNhbGwobnVsbCwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuXHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGVycm9ySGFuZGxlcnNba10gPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyc1trXShlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBvID0gMDsgbyA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IG8rKykge1xuXHRcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tvXTtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aXRlbS5yZXF1aXJlKG1vZHVsZUlkKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvdXRkYXRlZE1vZHVsZXM7XG5cdFx0fVxuXHR9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJLmpzb25wID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBhcHBseUhhbmRsZXJzKSB7XG5cdGlmICghY3VycmVudFVwZGF0ZSkge1xuXHRcdGN1cnJlbnRVcGRhdGUgPSB7fTtcblx0XHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gW107XG5cdFx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdH1cblx0aWYgKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdO1xuXHR9XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLmpzb25wID0gZnVuY3Rpb24gKFxuXHRjaHVua0lkcyxcblx0cmVtb3ZlZENodW5rcyxcblx0cmVtb3ZlZE1vZHVsZXMsXG5cdHByb21pc2VzLFxuXHRhcHBseUhhbmRsZXJzLFxuXHR1cGRhdGVkTW9kdWxlc0xpc3Rcbikge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHt9O1xuXHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHJlbW92ZWRDaHVua3M7XG5cdGN1cnJlbnRVcGRhdGUgPSByZW1vdmVkTW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG5cdFx0b2JqW2tleV0gPSBmYWxzZTtcblx0XHRyZXR1cm4gb2JqO1xuXHR9LCB7fSk7XG5cdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdGNodW5rSWRzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRpZiAoXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHQpIHtcblx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkpO1xuXHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0fVxuXHR9KTtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzICYmXG5cdFx0XHRcdCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZUNodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHRcdCkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSk7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yTSA9IGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnQ6IG5lZWQgZmV0Y2ggQVBJXCIpO1xuXHRyZXR1cm4gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGKCkpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHRpZihyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgcmV0dXJuOyAvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG5cdFx0aWYoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggdXBkYXRlIG1hbmlmZXN0IFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0fSk7XG59O1xuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiLy8gbW9kdWxlIGNhY2hlIGFyZSB1c2VkIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNTEpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==